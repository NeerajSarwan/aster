<text>
## Step 4 : Create baseline model

Next step is the modelling step, lets start with the simple linear model 

### 4.1 : Logistic Regression

Train a binary classifier logistic regression
</text>

<code>
model = LogisticRegression()
model.fit(X_train, y_train)
valp = model.predict(X_valid)
pred = model.predict(xtest)

def generate_auc(y_valid, valp):
    auc = roc_auc_score(y_valid, valp)
    print('AUC:', auc)

    fpr, tpr, thresholds = roc_curve(y_valid, valp)
    roc_auc = metrics.auc(fpr, tpr)

    plt.figure(figsize=(6,5))
    plt.title('Receiver Operating Characteristic for different ML algorithms')
    plt.plot(fpr, tpr, 'b', label = 'LGBM-AUC = %0.2f' % roc_auc)
    plt.legend(loc = 'upper left')
    plt.plot([0, 1], [0, 1],'r--')
    plt.xlim([0, 1])
    plt.ylim([0, 1])

    plt.ylabel('True Positive Rate')
    plt.xlabel('False Positive Rate')
    plt.show()

## will only plot auc roc if the target is binary
try:
    generate_auc(y_valid,valp)
except:
    pass
</code>


<code>
def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    plt.figure(figsize=(6,5))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt), horizontalalignment="center", 
                 color="white" if cm[i, j] > thresh else "black")
        
    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

cnf_matrix = confusion_matrix(y_valid, valp)
np.set_printoptions(precision=2)

plt.figure(figsize=(8,8))
plot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set')
plt.show()
</code>


<text>
### 4.2 : Random Forest Classifier

Now, lets train a tree based model : random forest
</text>

<code>
model = RandomForestClassifier()
model.fit(X_train, y_train)
valp = model.predict(X_valid)
pred = model.predict(xtest)

## will only plot auc roc if the target is binary
try:
    generate_auc(y_valid,valp)
except:
    pass

</code>



<code>
cnf_matrix = confusion_matrix(y_valid, valp)
np.set_printoptions(precision=2)

plt.figure(figsize=(6,5));
plot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set');
plt.show();
</code>


<text>
### 4.3 : xgBoost Classifier

Lets train the extereme gradient boosting : xgboost classifier
</text>

<code>
model = xgb.XGBClassifier(n_estimators=300, learning_rate=0.01)
model.fit(X_train, y_train)
valp = model.predict(X_valid)
pred = model.predict(xtest)

## will only plot auc roc if the target is binary
try:
    generate_auc(y_valid,valp)
except:
    pass

</code>


<code>
cnf_matrix = confusion_matrix(y_valid, valp)
np.set_printoptions(precision=2)

plt.figure(figsize=(6,5))
plot_confusion_matrix(cnf_matrix, classes=distinct_Y, title='Confusion matrix Validation Set')
plt.show()
</code>

<text>
## Step 5: Feature Importance

Lets look at some of the important features
</text>

<code>
plt.figure(figsize=(6,5))
plot_importance(model, max_num_features=10);
</code>

<text>
## Step 6 : Create Submission File

Finally, create the submission file from the extereme graident boosting model
</text>

<code>
sub = pd.DataFrame()
sub[_id] = test_id
sub[_target] = pred
sub.to_csv("baseline_submission.csv", index=False)
sub.head(10)
</code>





